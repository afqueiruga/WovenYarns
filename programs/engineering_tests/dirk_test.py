#!/usr/bin/python

from src import *
from matplotlib import pylab as plt
from IPython import embed

"""
Set up the warp with a single fibril
"""

E = 10.0
nu = 0.0
B = 1.0
radius = 0.02
Phi = np.pi/4.0

props =  [{
    'mu':E/(2*(1 + nu)),
    'lambda': E*nu/((1 + nu)*(1 - 2*nu)),
    'radius':radius,
    'rho':2.0,
    'em_B':Constant((B*np.cos(Phi),B*np.sin(Phi),0.0)),
    'em_seebeck':0.1,
    'dissipation':0.01,
    'mu_alpha':-0.01
    }]

endpts = [ [[-1.0,0.0,0.0],[1.0,0.0,0.0]] ]
warp = Warp(endpts, props, {}, [40], MonolithicProblem)


"""
Boundary conditions on the velocity updates
"""
zero = Constant((0.0,0.0,0.0, 0.0,0.0,0.0, 0.0,0.0,0.0, 0.0,0.0))
zeroV = Constant((0.0,0.0,0.0))
zeroS = Constant((0.0))
bound = CompiledSubDomain("on_boundary")
subR = MultiMeshSubSpace(warp.spaces['W'],0)
subT = MultiMeshSubSpace(warp.spaces['W'],3)
subV = MultiMeshSubSpace(warp.spaces['W'],4)
bcall = MultiMeshDirichletBC(warp.spaces['W'], zero, bound)
bcR = MultiMeshDirichletBC(subR, zeroV, bound)
bcT = MultiMeshDirichletBC(subT, zeroS, bound)
bcV = MultiMeshDirichletBC(subV, zeroS, bound)

def apply_BCs(K,R,t,hold=False):
    bcR.apply(K,R)
    bcT.apply(K,R)
    bcV.apply(K,R)

"""
DIRK's assembling routine
"""
def sys(time):
    return warp.assemble_forms(['F','AX','AV'],'W')


"""
Initialize routine
"""
def initialize():
    for i,fib in enumerate(warp.fibrils):
        fib.problem.fields['wx'].interpolate(Expression(("0.0","0.0","0.0",
                                       "0.0"," 0.0","0.0",
                                       "0.0","0.0","0.0",
                                       "0.0", "0.0")))
        fib.problem.fields['wv'].interpolate(Expression(("0.0","0.0","0.0",
                                       "0.0"," 0.0","0.0",
                                       "0.0","0.0","0.0",
                                       "0.0", "x[0]/5.0")))
        mdof = warp.spaces['W'].dofmap()
        warp.fields['wx'].vector()[ mdof.part(i).dofs() ] = fib.problem.fields['wx'].vector()[:]
        warp.fields['wv'].vector()[ mdof.part(i).dofs() ] = fib.problem.fields['wv'].vector()[:]



probes = [ (np.array([0.0,0.0, 0.0],dtype=np.double),2,'x'),
            (np.array([0.5,0.0, 0.0],dtype=np.double),1,'x'),
            (np.array([0.5,0.0, 0.0],dtype=np.double),9,'v'),
            (np.array([0.5,0.0, 0.0],dtype=np.double),10,'v')]
weval = np.zeros(11)


def solve(order,NT):
    h = Tmax/NT
    time_series = np.zeros((NT+1,len(probes)))
    times = np.zeros(NT+1)
    time_series[0] = 0.0
    initialize()
    dirk = DIRK_Monolithic(h,LDIRK[order], sys,warp.update,apply_BCs,
                       warp.fields['wx'].vector(),warp.fields['wv'].vector(),
                       warp.assemble_form('M','W'))
    # warp.output_states("post/dirk_more/dirk_{0}_"+str(0)+".pvd",0)
    # warp.output_solids("post/dirk_more/mesh_{0}_"+str(0)+".pvd",0)
    for t in xrange(NT):
        dirk.march()
        # if t%10==0:
            # warp.output_states("post/dirk_more/dirk_{0}_"+str(t+1)+".pvd",0)
            # warp.output_solids("post/dirk_more/mesh_{0}_"+str(t+1)+".pvd",0)

        for g,p in enumerate(probes):
            if p[2]=='x':
                warp.fibrils[0].problem.fields['wx'].eval(weval,p[0])
            else:
                warp.fibrils[0].problem.fields['wv'].eval(weval,p[0])
            time_series[t+1,g] = weval[p[1]]
        times[t+1] = (t+1)*h
        print "Step ",t,"/",NT
    f = open("dirkdata_3","a")
    f.write("{0} ".format(NT))
    for g in xrange(4):
        f.write( "{0} ".format(time_series[-1,g] ) )
    f.write("\n")
    f.close()
    return (times,time_series,h,order)


Tmax = 5.0

# NTS = [[ 125, 150 ]]
NTS = [[ 75, 175 ]]
# NTS = [[ 250, 275, 325, 375, 425 ]]
# NTS = [[ 350,450,550 ]]
orders = [ 2 ]


all_series = [ ]

for order,nts in zip(orders,NTS):
    results = []
    for NT in nts:
        results.append( solve(order,NT) )
    all_series.append( (order, results) )

points = [ [ [x[1][-1,g] for x in o[1]] for o in all_series] for g in range(len(probes)) ]
def make_plots(all_series):
    for g in xrange(len(probes)):
        plt.figure()
        for series in all_series:
            for ts,ys,o,h in series[1]:
                plt.plot(ts,ys[:,g])
        plt.figure()
        exact = all_series[-1][1][-1][1][-1,g]
        for series in all_series:
            plt.loglog([ x[2] for x in series[1]],
                        [ np.abs(x[1][-1,g]-exact) for x in series[1] ],'-+')
def make_plots_time(all_series):
    ylabels = ["Vertical displacement y(0) (mm)","Lateral Displacement z(0.5) (mm)",
               "Temperature T(0.5) (K)", "Voltage V(0.5) (V)" ]
    font = {'family' : 'normal',
            'size'   : 16}
    matplotlib.rc('font', **font)
    for g in xrange(len(probes)):
        plt.figure()
        plt.xlabel("Time t (ms)")
        plt.ylabel(ylabels[g])
        for series in all_series:
            for ts,ys,o,h in series[1]:
                plt.plot(ts,ys[:,g])
    
def make_final_plots(NTS,points):
    hs = [ [Tmax / NT for NT in nts] for nts in NTS]
    for probe in points:
        for h,p in zip(NTS,probe):
            plt.plot(h,p)
        plt.figure()
        best = probe[-1][-1]
        for h,p in zip(hs,probe):
            plt.loglog( h, [np.abs(y-best) for y in p],'-+')
        plt.figure()
def make_error_plots(NTS,points, snt,pts, labels):
    font = {'family' : 'normal',
            'size'   : 16}
    matplotlib.rc('font', **font)
    hs = [ [Tmax / NT for NT in nts] for nts in NTS]
    shs =[ [Tmax / NT for NT in nts] for nts in snt]
    colors = ["b","g","r"]
    for label,probe,spr in zip(labels,points,pts):
        plt.figure()
        plt.xlabel("Logarithm of time step size log(h)")
        plt.ylabel("Logarithm of error in "+label)
        best = probe[-1][-1]
        for i,(h,p,sh,sp,c) in enumerate(zip(hs,probe,shs,spr,colors)):
            plt.loglog( h, [np.abs(y-best) for y in p],'-',label='s='+str(i+1),color=c)
            plt.loglog( sh, [np.abs(y-best) for y in sp],'+',color=c)
        plt.legend()
def compute_convergence(NTS,points):
    import copy
    import scipy.stats
    points = copy.deepcopy(points)
    hs = [ [Tmax / NT for NT in nts] for nts in NTS]
    hs[-1].pop()
    for p in points:
        best = p[-1].pop()
        for h,s in zip(hs,p):
            print scipy.stats.linregress([ np.log(x) for x in h ], 
                                         [np.log(np.abs(y-best)) for y in s])[0],
        print ""
def trunk(i,n):
     snt[i] = snt[i][n:]
     for l in pts:
         l[i] = l[i][n:]

print points
embed()

# def compute_convergence(all_series):
#     import scipy.stats
#     for g in xrange(len(probes)):
#         exact = all_series[-1][1][-1][1][-1,g]
#         for ix,series in enumerate(all_series):
        
#             print (scipy.stats.linregress([ np.log(x[2]) for x in series[1][:(-1 if ix==len(all_series)-1 else -2)] ],
#                                           [ np.log(np.abs(x[1][-1,g]-exact)) for x in series[1][:(-1 if ix==len(all_series)-1 else -2)] ]))[0],
#         print ""

compute_convergence(NTS,points)

make_plots(all_series)
plt.show()


embed()

print points

"""
[[100,
  200,
  300,
  400,
  500,
  600,
  800,
  1000,
  1200,
  1400,
  1600,
  1800,
  2000,
  2200,
  2400,2600, 2800, 3000, 3200,3400, 3800, 4200,
  5000, 7000, 9000, 11000, 13000],
 [30,
  50,
  70,
  90,
  110,
  120,
  130,
  140,
  160,
  180,
  200,
  220,
  240,
  260,
  280,
  300,
  320,
  340,
  360,380, 420, 460,
  500, 600, 700, 800],
 [10,
  20,
  40,
  50,
  60,
  70,
  80,
  90,
  110,
  130,
  150,
  170,
  190,
  210,
  230,
  250,
  270,
  290,
  310,350, 375, 400, 425, 450, 475,
  500, 1000]]


[[[-0.47769899145061673,
   -0.47215960699384041,
   -0.46998291355705801,
   -0.46893579907082117,
   -0.46834882253750565,
   -0.4679819273432933,
   -0.46755532581975073,
   -0.46731667193520948,
   -0.46716365693652884,
   -0.46705624568210524,
   -0.46697588488252995,
   -0.46691289725063101,
   -0.46686177099442022,
   -0.46681914397594226,
   -0.46678284882591342,-0.46675142327677221,
   -0.46672384242360282,
   -0.46669936431666709,
   -0.46667743679663221,-0.46665763905060453, -0.46662319136051561, -0.46659411949791696,
   -0.46654745186479479,
   -0.46647015179418244,
   -0.46642218536425728,
   -0.46638926315462259,
   -0.46636518903395513],
  [-0.46420465511567699,
   -0.46704536622563059,
   -0.46499683461909719,
   -0.46495097818159004,
   -0.46527802642333027,
   -0.46546525582807646,
   -0.4656042503605578,
   -0.46569736666461692,
   -0.46579001877113574,
   -0.46586245068132587,
   -0.46592529556050888,
   -0.46597175427255255,
   -0.46600244988822492,
   -0.46602592395281267,
   -0.46604658435068164,
   -0.46606467729057255,
   -0.46608003946907328,
   -0.46609281205317443,
   -0.46610370690367819,-0.46611342057435784, -0.46612934694006064, -0.46614054528723664,
   -0.4661489835308445,
   -0.46616380256800621,
   -0.4661738283620096,
   -0.46618092533753064],
  [-0.47391882564409454,
   -0.46466371994285738,
   -0.46610369962112563,
   -0.4660905502723468,
   -0.46607711669849128,
   -0.46611799993488107,
   -0.46617303187214387,
   -0.46622119053189154,
   -0.46627702168555651,
   -0.46629270480905605,
   -0.46629102160391833,
   -0.46628317658578755,
   -0.46627372896997288,
   -0.46626457822037021,
   -0.46625639969782295,
   -0.46624933156708365,
   -0.4662433121351412,
   -0.46623821860294773,
   -0.46623391919890295,-0.46622723117829484, -0.46622406358742924, -0.46622149105894234, -0.46621939380130278, -0.46621767584367219, -0.46621626091757828,
   -0.46621508874689166,-0.46620854900719344]],
 [[-0.047456106191471996,
   -0.045747468271972742,
   -0.04491188873974683,
   -0.044396689016726554,
   -0.044039981044774322,
   -0.043775153608050787,
   -0.043403586965746019,
   -0.043152378414170182,
   -0.042969755512373725,
   -0.04283038310367257,
   -0.042720212869195799,
   -0.042630763600223526,
   -0.04255658705879338,
   -0.042494012429433577,
   -0.042440470700541591,-0.042394107172890196,
   -0.042353547596451276,
   -0.042317750989954127,
   -0.042285913699855356,-0.042257404955140236, -0.042208460960263969, -0.042167936720700447,
   -0.042104673705742328,
   -0.042005602537297931,
   -0.041948127376865492,
   -0.041910540429931149,
   -0.041884022052566694],
  [-0.04278373745724201,
   -0.042251801045202521,
   -0.042048696609755042,
   -0.041837006671959692,
   -0.041837191720470596,
   -0.041844997380881481,
   -0.041848505958825076,
   -0.041844963346386661,
   -0.041827824920486402,
   -0.041809067204111532,
   -0.041792116543263431,
   -0.041781802369867609,
   -0.041775453448109977,
   -0.041769637890938079,
   -0.041763650296113813,
   -0.041758453339371518,
   -0.041754138272209022,
   -0.041750444135264159,
   -0.041747352508912657,-0.041744889043023231, -0.041741256697112872, -0.041738782013821842,
   -0.041736950647894761,
   -0.041734110112047793,
   -0.041732631354340945,
   -0.041731779129135921],
  [-0.04698789074354065,
   -0.044171552782272944,
   -0.042557702372213589,
   -0.04234349100322575,
   -0.042185334223959522,
   -0.042076103919230362,
   -0.042002779017471827,
   -0.041951444860305914,
   -0.041882948190340809,
   -0.041838938365998488,
   -0.041809388174698821,
   -0.041789146625602229,
   -0.041774950444917872,
   -0.041764742666057932,
   -0.041757253177833624,
   -0.041751671120724601,
   -0.041747452914952014,
   -0.041744222776603453,
   -0.041741716729879953,-0.041738181253170671, -0.041736645391753778, -0.041735456400056069, -0.041734522454187815, -0.0417337791793106, -0.041733180606152616,
   -0.04173269335608297,-0.041730083746657168]],
 [[0.11026723321675623,
   0.1103498155210125,
   0.11040595141170756,
   0.11041940664396782,
   0.11041331597967649,
   0.11039889426471942,
   0.11036303573044855,
   0.11032828704573008,
   0.11029797997490445,
   0.11027224784495471,
   0.11025048112026464,
   0.11023198678499903,
   0.11021615703084289,
   0.11020249683285746,
   0.11019061271207403,0.11018019366579049,
   0.1101709932863503,
   0.11016281515921222,
   0.11015550151779711,0.11014892459162517, 0.11013758197124825, 0.1101281519178291,
   0.11011338407961682,
   0.11009021470014892,
   0.11007678681800485,
   0.11006802117263094,
   0.1100618464687577],
  [0.10864296238666446,
   0.10929756343605079,
   0.10942536547914444,
   0.10956723491302137,
   0.10969834976994607,
   0.1097494394433524,
   0.10979130909649248,
   0.10982455784613968,
   0.10987157623929733,
   0.10990326497382771,
   0.1099254043391425,
   0.10994212684583378,
   0.10995541135020127,
   0.10996585523648489,
   0.10997408632137373,
   0.10998070121762721,
   0.10998607983699862,
   0.10999050218564875,
   0.1099942020122547,0.10999734205575484, 0.11000233175822609, 0.11000609883128527,
   0.11000903218239366,
   0.11001408830480792,
   0.11001719805449402,
   0.1100192496863612],
  [0.10755349429714028,
   0.10988748676114356,
   0.11023201033421404,
   0.11018857143180938,
   0.11013848476199084,
   0.11010312494325389,
   0.11008111113303785,
   0.11006755717396344,
   0.11005272184024263,
   0.11004484623345012,
   0.1100399705381942,
   0.1100367162799324,
   0.11003443793737634,
   0.11003277867254892,
   0.11003153146285997,
   0.11003057173135207,
   0.1100298201909123,
   0.11002922356068931,
   0.11002874449116895,0.11002803810522349, 0.11002771756906975, 0.11002746251164411, 0.11002725727168626, 0.11002709039540845, 0.11002695340463675,
   0.11002683994861805,0.11002618971276733]],
 [[0.10140733861131621,
   0.10396938156693444,
   0.105427595715564,
   0.10634996227538511,
   0.10698273791069968,
   0.10744310906103252,
   0.108068662545889,
   0.10847560882395119,
   0.10876318098828559,
   0.10897832256027168,
   0.10914605467891762,
   0.10928094226247675,
   0.10939205686853495,
   0.10948535819483689,
   0.10956493347969123,0.10963368628970424,
   0.1096937406387434,
   0.109746689125648,
   0.10979375130112885,0.10983587815138028, 0.10990819111305887, 0.10996807754108011,
   0.11006164794699501,
   0.11020857040095328,
   0.1102941430788198,
   0.11035027934165724,
   0.11038997773556777],
  [0.098761568292996912,
   0.10429608128839821,
   0.10699162516694286,
   0.10873366079996179,
   0.10950046844706875,
   0.10972196559928586,
   0.10989841565816857,
   0.11003343867133909,
   0.11022430051345873,
   0.11033966136116559,
   0.11041215580588025,
   0.11045941929198658,
   0.11048764762454825,
   0.11050308688850202,
   0.11051269570440678,
   0.11052062782582135,
   0.11052826181027411,
   0.11053606074707129,
   0.11054372871648707,0.11055082733883476, 0.11056278656375763, 0.11057192336648364,
   0.11057913562955778,
   0.11059242383282221,
   0.1106008718618969,
   0.11060625586085709],
  [0.096235949639356805,
   0.10338946597907529,
   0.10832655377214188,
   0.10923213517722483,
   0.10972628579298041,
   0.11001554129809414,
   0.11018804719786396,
   0.11029438106851669,
   0.11041390172167387,
   0.11047826669060015,
   0.11051705515342648,
   0.11054194161248654,
   0.1105588009976827,
   0.11057089214284983,
   0.11058003093892997,
   0.11058720414335405,
   0.11059296004476574,
   0.11059763309093661,
   0.11060145307966739,0.11060718422547174, 0.11060981426295714, 0.11061191270344477, 0.1106135988362712, 0.11061496269074858, 0.11061607286398477,
   0.11061698209866978,0.11062172378234567]]]

"""

"""
 NTS = [ [100,200,300,400,500,600,800,1000, 1200, 1400, 1600,1800, 2000, 2200, 2400],[30,50,70,90,110,120,130,140,160,180,200,220, 240, 260, 280,300, 320, 340, 360], [10,20,40,50,60,70,80,90,110,130,150,170, 190, 210, 230,250, 270, 290, 310] ]
 points = [
  [[-0.47354256551013829, -0.46976205002342103, -0.46767478113021388, -0.46635692843837562, -0.46544543839403157, -0.4647734455858622, -0.46384095886048182,-0.46321886020534431,
   -0.46277160692266517,
   -0.46243368864699075,
   -0.46216914173129547,-0.4619563958876558,
   -0.46178165013835315,
   -0.46163562988566126,
   -0.46151185713305315],
   [-0.46471837555720191, -0.46352549473414906, -0.46093105379107907, -0.46100244841829302, -0.46081801683045015, -0.46072542016063084, -0.46068923751542357, -0.46067042899854654,-0.46064920680427129, -0.46059950221523838, -0.46053992904902769,-0.46049161499597119,
   -0.46045954490945645,
   -0.46043827991608077,
   -0.46041138787453217,-0.46037917024521258,
   -0.46034652953503341,
   -0.46031624916970293,
   -0.46028916988448565],
   [-0.46561439540452826, -0.46580684109379972, -0.46248972396049853, -0.46144143010145561, -0.46094239207850113, -0.46068942534459728, -0.4605260281996677, -0.46040742600063722,-0.46025771833785101, -0.46017780187552859, -0.46013349417258803,-0.46010843859021694,
   -0.46009378921155003,
   -0.46008451258334976,
   -0.46007805756567144,-0.46007326759748535,
   -0.46006960318287565,
   -0.46006676201736507,
   -0.4600645404423731]],
   
  [[-0.04793235660299671, -0.046151782837444685, -0.045451662545402255, -0.045084826305028289, -0.044851148877484946, -0.044683281242271618,-0.044448931222090982,-0.043373020797670234,
   -0.043373464361313126,
   -0.043374570624902346,
   -0.043375656288911532,-0.04394246479408008,
   -0.043892538553848032,
   -0.043850445909397066,
   -0.043814509277780703],
   [-0.041501925613143482, -0.04299237165813407, -0.043204682354834163, -0.043116210347811601, -0.043138318176561066, -0.043143599636370072, -0.043147509949851406, -0.043153626182168912,-0.043179228601710903, -0.043204570283122933, -0.043225110371468728,-0.043246363002132998,
   -0.043266837284324122,
   -0.043285989038175182,
   -0.043302541500161884,-0.043315777100491927,
   -0.043326089685832146,
   -0.043333853003202631,
   -0.043339559973147188],
   [-0.047391165008310865, -0.04373812709482857, -0.043713675945423205, -0.043714223838754562, -0.043636294514691511, -0.043557078406173885, -0.043496845747245515, -0.0434538544105934,-0.043403964973372913, -0.043382663429316765, -0.04337489241335972,-0.043373020797670234,
   -0.043373464361313126,
   -0.043374570624902346,
   -0.043375656288911532,-0.043376507823005409,
   -0.043377110835431644,
   -0.043377515144506412,
   -0.043377777614965973]],
   
  [[0.11286000091159715, 0.11387552953016671, 0.11453185794123591, 0.11496287134196109, 0.11526456099265997, 0.1154865447740655, 0.11578978722523786,0.11598607896687568,
   0.11612289459786043,
   0.11622343116140364,
   0.11630029957755876,0.11636091503720891,
   0.11640990899677399,
   0.11645031658831689,
   0.11648420634801293],
   [0.11398958546370701, 0.11581209690857877, 0.11625058312872757, 0.11656552182452373, 0.11670153383537342, 0.11672883860883743, 0.11674596440918854, 0.11675943951653135,0.11678164183153786, 0.11679826511414761, 0.11681116308446804,0.11682175168094644,
   0.11683059193714433,
   0.11683772082476575,
   0.11684341784269373,0.116847800839031,
   0.11685117039116572,
   0.11685374071321925,
   0.11685569594716973],
   [0.11085690664997393, 0.11435279714776798, 0.11629088915655314, 0.1165707086076295, 0.11670820371990953, 0.11678195542607597, 0.11682156221432886, 0.11684231310038401,0.11685911870126085, 0.11686478607347642, 0.11686742220368833,0.11686900034344429,
   0.11687006859691693,
   0.11687081800601949,
   0.11687134933396656,0.11687173260408948,
   0.1168720177219244,
   0.11687223800367748,
   0.11687241419907884]],
   
  [[0.10460780852184572, 0.10999471971556088, 0.11324586058479143, 0.11536694523039613, 0.1168488099342711, 0.1179386996662397,0.11942881685431092,0.12039531347609184,
   0.12107015319117606,
   0.12156661235776292,
   0.12194639992510585,0.12224589944733835,
   0.1224878949105329,
   0.12268735111697197,
   0.12285448646726478],
   [0.1134088621563244, 0.12060268354121238, 0.12378339503255137, 0.1248693606304548, 0.12460887594282459, 0.12447297559608586, 0.12438803285424029, 0.12435775573914609,0.12438164865981031, 0.12444084808814958, 0.12449036325333018,0.12452622525454674,
   0.12455356273104379,
   0.12457354275867528,
   0.12458896926145781,0.12460125438069763,
   0.12460824392122191,
   0.12461106199148456,
   0.12461413132322303],
   [0.10182544973487551, 0.1128582819495214, 0.12196698262309182, 0.1233910736338773, 0.12410045026345405,
   0.12442495583974018,
   0.12455667757389211,
   0.12460761731905089,0.12464396709408845, 0.12466573587825829, 0.12468230466018793,0.12469332273952431,
   0.12469996330515233,
   0.12470368708417796,
   0.12470562835731575,0.12470656410422774,
   0.1247069859017958,
   0.12470717343620358,
   0.12470726790483744]]
   ]

"""
